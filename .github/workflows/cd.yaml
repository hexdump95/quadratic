name: "CI/CD"
on:
  push:
    branches: [develop, release-*]
    tags: ["*"]
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - name: Format and run test
        run: |-
          go fmt
          go test -json > report.json
          go test -coverprofile=coverage.out
      - name: Analyze with SonarCloud
        if: ${{ success() && github.ref == 'refs/heads/develop' }}
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.organization=hexdump95
            -Dsonar.projectKey=hexdump95_quadratic
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.exclusions="*_test.go,deploy/**"
            -Dsonar.test.inclusions="*_test.go"
            -Dsonar.test.exclusions="*_test.go,deploy/**"
            -Dsonar.go.tests.reportPaths=report.json
            -Dsonar.go.coverage.reportPaths=coverage.out
  integration-test:
    if: ${{ contains(github.ref, 'release') }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      # - uses: actions/setup-go@v2
      #   with:
      #     go-version: "1.17"
      # - name: Format and run test
      #   run: |-
      #     go fmt
      #     go test
  build:
    if: ${{ always() && contains(needs.test.result, 'success') && !contains(needs.integration-test.result, 'failure') }}
    runs-on: ubuntu-20.04
    needs: [test, integration-test]
    container: docker:latest
    env:
      CR_SERVER: ghcr.io
    services:
      dind:
        image: docker:dind
    steps:
      - uses: actions/checkout@v2
      - name: docker login
        run: echo ${{ secrets.CR_TOKEN }} | docker login $CR_SERVER -u ${{ secrets.CR_USER }} --password-stdin
      - name: set image tag
        run: |-
          echo "IMAGE_TAG=$(if [ $GITHUB_REF_TYPE = 'branch' ]; then echo $(date -u +'%FT%TZ' | sed s/:/-/g); else echo $GITHUB_REF; fi)" > IMAGE_TAG
          cat IMAGE_TAG >> $GITHUB_ENV
      - name: Build image
        run: >-
          docker build .
          -t $CR_SERVER/$GITHUB_REPOSITORY:${IMAGE_TAG##*/}
          -t $CR_SERVER/$GITHUB_REPOSITORY:$(echo ${IMAGE_TAG##*/} | cut -f 1-2 -d ".")
          -t $CR_SERVER/$GITHUB_REPOSITORY:$(echo ${IMAGE_TAG##*/} | cut -f 1 -d ".")
          -t $CR_SERVER/$GITHUB_REPOSITORY:latest
      - name: Push image to ghcr.io
        run: |-
          docker push $CR_SERVER/$GITHUB_REPOSITORY:${IMAGE_TAG##*/}
          docker push $CR_SERVER/$GITHUB_REPOSITORY:$(echo ${IMAGE_TAG##*/} | cut -f 1-2 -d ".")
          docker push $CR_SERVER/$GITHUB_REPOSITORY:$(echo ${IMAGE_TAG##*/} | cut -f 1 -d ".")
          docker push $CR_SERVER/$GITHUB_REPOSITORY:latest
      - run: docker logout $CR_SERVER
      - uses: actions/upload-artifact@v2
        with:
          name: IMAGE_TAG
          path: IMAGE_TAG
  deploy-dev:
    if: ${{ always() && contains(needs.build.result, 'success') && contains(github.ref, 'heads/develop') }}
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: IMAGE_TAG
      - name: set image tag
        run: cat IMAGE_TAG >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - run: echo deploy!
  deploy-prod:
    if: ${{ always() && contains(needs.build.result, 'success') && ( contains(github.ref, 'tags') || contains(github.ref, 'release') ) }}
    runs-on: ubuntu-20.04
    needs: build
    container: google/cloud-sdk:365.0.1-alpine
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: IMAGE_TAG
      - name: set image tag
        run: cat IMAGE_TAG >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Install kubectl
        run: yes | gcloud components install kubectl
      - name: Login to gcloud
        run: |-
          echo ${{ secrets.GKE_KEY }} > key.json
          gcloud auth activate-service-account --key-file=key.json
          gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER }} --region=${{ secrets.GCP_REGION }} --project=${{ secrets.GCP_PROJECT }}
      - name: Deploy service
        run: |-
          sed -i s/\$IMAGE_TAG/$IMAGE_TAG/ deploy/service.yaml
          kubectl apply -f deploy/service.yaml
